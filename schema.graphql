"""Exposes a URL that specifies the behaviour of this scalar."""
directive @specifiedBy(
  """The URL that specifies the behaviour of this scalar."""
  url: String!
) on SCALAR

input ChangePasswordInput {
  currentPassword: String!
  newPassword: String!
  clientMutationId: String
}

type ChangePasswordPayload {
  user: UserNode
  clientMutationId: String
}

input CreateUserInput {
  firstName: String!
  lastName: String!
  phone: String
  email: String!
  password: String!
  clientMutationId: String
}

type CreateUserPayload {
  user: UserNode
  clientMutationId: String
}

"""
The `DateTime` scalar type represents a DateTime
value as specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar DateTime

"""
The `GenericScalar` scalar type represents a generic
GraphQL scalar value that could be:
String, Boolean, Int, Float, List or Object.
"""
scalar GenericScalar

type Mutation {
  """Obtain JSON Web Token mutation"""
  tokenAuth(username: String!, password: String!): ObtainJSONWebToken
  verifyToken(token: String): Verify
  refreshToken(token: String): Refresh
  createUser(input: CreateUserInput!): CreateUserPayload
  updateUser(input: UpdateMeInput!): UpdateMePayload
  changePassword(input: ChangePasswordInput!): ChangePasswordPayload
}

"""An object with an ID"""
interface Node {
  """The ID of the object"""
  id: ID!
}

"""Obtain JSON Web Token mutation"""
type ObtainJSONWebToken {
  payload: GenericScalar!
  refreshExpiresIn: Int!
  token: String!
}

"""
The Relay compliant `PageInfo` type, containing data necessary to paginate this connection.
"""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type ProjectNode implements Node {
  """The ID of the object"""
  id: ID!
  name: String!
  description: String
  createdAt: DateTime!
  updatedAt: DateTime!
  subprojects(offset: Int, before: String, after: String, first: Int, last: Int): SubProjectNodeConnection!
}

type ProjectNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [ProjectNodeEdge]!
}

"""A Relay edge containing a `ProjectNode` and its cursor."""
type ProjectNodeEdge {
  """The item at the end of the edge"""
  node: ProjectNode

  """A cursor for use in pagination"""
  cursor: String!
}

"""An enumeration."""
enum ProjectsSnippetTypeChoices {
  """Syntax"""
  SYNTAX

  """Command"""
  COMMAND
}

type Query {
  project(
    """The ID of the object"""
    id: ID!
  ): ProjectNode
  projects(offset: Int, before: String, after: String, first: Int, last: Int): ProjectNodeConnection
  subproject(
    """The ID of the object"""
    id: ID!
  ): SubProjectNode
  subprojects(offset: Int, before: String, after: String, first: Int, last: Int): SubProjectNodeConnection
  subprojectGroup(
    """The ID of the object"""
    id: ID!
  ): SubProjectGroupNode
  subprojectGroups(offset: Int, before: String, after: String, first: Int, last: Int): SubProjectGroupNodeConnection
  snippet(
    """The ID of the object"""
    id: ID!
  ): SnippetNode
  snippets(offset: Int, before: String, after: String, first: Int, last: Int): SnippetNodeConnection
  me: UserNode
}

type Refresh {
  payload: GenericScalar!
  refreshExpiresIn: Int!
  token: String!
}

type SnippetNode implements Node {
  """The ID of the object"""
  id: ID!
  subprojectGroup: SubProjectGroupNode!
  title: String!
  value: String!
  description: String
  type: ProjectsSnippetTypeChoices!
  fileName: String
  createdAt: DateTime!
}

type SnippetNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [SnippetNodeEdge]!
}

"""A Relay edge containing a `SnippetNode` and its cursor."""
type SnippetNodeEdge {
  """The item at the end of the edge"""
  node: SnippetNode

  """A cursor for use in pagination"""
  cursor: String!
}

type SubProjectGroupNode implements Node {
  """The ID of the object"""
  id: ID!
  subproject: SubProjectNode!
  name: String!
  description: String
  createdAt: DateTime!
  snippets(offset: Int, before: String, after: String, first: Int, last: Int): SnippetNodeConnection!
}

type SubProjectGroupNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [SubProjectGroupNodeEdge]!
}

"""A Relay edge containing a `SubProjectGroupNode` and its cursor."""
type SubProjectGroupNodeEdge {
  """The item at the end of the edge"""
  node: SubProjectGroupNode

  """A cursor for use in pagination"""
  cursor: String!
}

type SubProjectNode implements Node {
  """The ID of the object"""
  id: ID!
  project: ProjectNode!
  name: String!
  description: String
  createdAt: DateTime!
  subprojectGroups(offset: Int, before: String, after: String, first: Int, last: Int): SubProjectGroupNodeConnection!
}

type SubProjectNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [SubProjectNodeEdge]!
}

"""A Relay edge containing a `SubProjectNode` and its cursor."""
type SubProjectNodeEdge {
  """The item at the end of the edge"""
  node: SubProjectNode

  """A cursor for use in pagination"""
  cursor: String!
}

input UpdateMeInput {
  firstName: String!
  lastName: String!
  phone: String
  email: String!
  clientMutationId: String
}

type UpdateMePayload {
  user: UserNode
  clientMutationId: String
}

type UserNode implements Node {
  """The ID of the object"""
  id: ID!
  password: String!
  lastLogin: DateTime

  """
  Designates that this user has all permissions without explicitly assigning them.
  """
  isSuperuser: Boolean!
  firstName: String!
  lastName: String!
  phone: String
  email: String!
  isStaff: Boolean!
  isActive: Boolean!
}

type Verify {
  payload: GenericScalar!
}

